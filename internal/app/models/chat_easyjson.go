// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels(in *jlexer.Lexer, out *MessageResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTime).UnmarshalJSON(data))
			}
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels(out *jwriter.Writer, in MessageResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.CreationTime).MarshalJSON())
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChatID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels1(in *jlexer.Lexer, out *GetNMessagesBeforeReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		case "count":
			out.Count = int(in.Int())
		case "message_id":
			out.LastMessageID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels1(out *jwriter.Writer, in GetNMessagesBeforeReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ChatID))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LastMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNMessagesBeforeReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNMessagesBeforeReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNMessagesBeforeReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNMessagesBeforeReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels1(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels2(in *jlexer.Lexer, out *GetLastNMessagesReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels2(out *jwriter.Writer, in GetLastNMessagesReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ChatID))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetLastNMessagesReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetLastNMessagesReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetLastNMessagesReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetLastNMessagesReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels2(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels3(in *jlexer.Lexer, out *CreateMsgAdditData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "partner_id":
			out.PartnerID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels3(out *jwriter.Writer, in CreateMsgAdditData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"partner_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.PartnerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateMsgAdditData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateMsgAdditData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateMsgAdditData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateMsgAdditData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels3(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels4(in *jlexer.Lexer, out *CreateMessageReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels4(out *jwriter.Writer, in CreateMessageReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ChatID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateMessageReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateMessageReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateMessageReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateMessageReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels4(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels5(in *jlexer.Lexer, out *ChatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "creation_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTime).UnmarshalJSON(data))
			}
		case "last_msg_content":
			out.LastMsgContent = string(in.String())
		case "last_msg_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMsgTime).UnmarshalJSON(data))
			}
		case "partner_id":
			out.PartnerID = uint64(in.Uint64())
		case "partner_name":
			out.PartnerName = string(in.String())
		case "partner_surname":
			out.PartnerSurname = string(in.String())
		case "partner_avatar":
			out.PartnerAvatarLink = string(in.String())
		case "product_id":
			out.ProductID = uint64(in.Uint64())
		case "product_name":
			out.ProductName = string(in.String())
		case "product_amount":
			out.ProductAmount = int(in.Int())
		case "product_avatar_link":
			out.ProductAvatarLink = string(in.String())
		case "new_messages":
			out.NewMessages = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels5(out *jwriter.Writer, in ChatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"creation_time\":"
		out.RawString(prefix)
		out.Raw((in.CreationTime).MarshalJSON())
	}
	{
		const prefix string = ",\"last_msg_content\":"
		out.RawString(prefix)
		out.String(string(in.LastMsgContent))
	}
	{
		const prefix string = ",\"last_msg_time\":"
		out.RawString(prefix)
		out.Raw((in.LastMsgTime).MarshalJSON())
	}
	{
		const prefix string = ",\"partner_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PartnerID))
	}
	{
		const prefix string = ",\"partner_name\":"
		out.RawString(prefix)
		out.String(string(in.PartnerName))
	}
	{
		const prefix string = ",\"partner_surname\":"
		out.RawString(prefix)
		out.String(string(in.PartnerSurname))
	}
	{
		const prefix string = ",\"partner_avatar\":"
		out.RawString(prefix)
		out.String(string(in.PartnerAvatarLink))
	}
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ProductID))
	}
	{
		const prefix string = ",\"product_name\":"
		out.RawString(prefix)
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"product_amount\":"
		out.RawString(prefix)
		out.Int(int(in.ProductAmount))
	}
	{
		const prefix string = ",\"product_avatar_link\":"
		out.RawString(prefix)
		out.String(string(in.ProductAvatarLink))
	}
	{
		const prefix string = ",\"new_messages\":"
		out.RawString(prefix)
		out.Int(int(in.NewMessages))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels5(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels6(in *jlexer.Lexer, out *ChatCreateReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productID":
			out.ProductID = uint64(in.Uint64())
		case "partnerID":
			out.PartnerID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels6(out *jwriter.Writer, in ChatCreateReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ProductID))
	}
	{
		const prefix string = ",\"partnerID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PartnerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatCreateReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatCreateReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20211YSNPInternalAppModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatCreateReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatCreateReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20211YSNPInternalAppModels6(l, v)
}
