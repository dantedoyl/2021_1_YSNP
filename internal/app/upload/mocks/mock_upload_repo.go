// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/upload (interfaces: UploadRepository)

// Package mock is a generated GoMock package.
package mock

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUploadRepository is a mock of UploadRepository interface.
type MockUploadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUploadRepositoryMockRecorder
}

// MockUploadRepositoryMockRecorder is the mock recorder for MockUploadRepository.
type MockUploadRepositoryMockRecorder struct {
	mock *MockUploadRepository
}

// NewMockUploadRepository creates a new mock instance.
func NewMockUploadRepository(ctrl *gomock.Controller) *MockUploadRepository {
	mock := &MockUploadRepository{ctrl: ctrl}
	mock.recorder = &MockUploadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadRepository) EXPECT() *MockUploadRepositoryMockRecorder {
	return m.recorder
}

// InsertPhoto mocks base method.
func (m *MockUploadRepository) InsertPhoto(arg0 *multipart.FileHeader, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhoto", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhoto indicates an expected call of InsertPhoto.
func (mr *MockUploadRepositoryMockRecorder) InsertPhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhoto", reflect.TypeOf((*MockUploadRepository)(nil).InsertPhoto), arg0, arg1)
}

// InsertPhotos mocks base method.
func (m *MockUploadRepository) InsertPhotos(arg0 []*multipart.FileHeader, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhotos", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhotos indicates an expected call of InsertPhotos.
func (mr *MockUploadRepositoryMockRecorder) InsertPhotos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhotos", reflect.TypeOf((*MockUploadRepository)(nil).InsertPhotos), arg0, arg1)
}

// RemovePhoto mocks base method.
func (m *MockUploadRepository) RemovePhoto(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePhoto indicates an expected call of RemovePhoto.
func (mr *MockUploadRepositoryMockRecorder) RemovePhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePhoto", reflect.TypeOf((*MockUploadRepository)(nil).RemovePhoto), arg0)
}

// RemovePhotos mocks base method.
func (m *MockUploadRepository) RemovePhotos(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePhotos", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePhotos indicates an expected call of RemovePhotos.
func (mr *MockUploadRepositoryMockRecorder) RemovePhotos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePhotos", reflect.TypeOf((*MockUploadRepository)(nil).RemovePhotos), arg0)
}
