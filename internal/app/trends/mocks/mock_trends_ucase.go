// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/trends (interfaces: TrendsUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	errors "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockTrendsUsecase is a mock of TrendsUsecase interface.
type MockTrendsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTrendsUsecaseMockRecorder
}

// MockTrendsUsecaseMockRecorder is the mock recorder for MockTrendsUsecase.
type MockTrendsUsecaseMockRecorder struct {
	mock *MockTrendsUsecase
}

// NewMockTrendsUsecase creates a new mock instance.
func NewMockTrendsUsecase(ctrl *gomock.Controller) *MockTrendsUsecase {
	mock := &MockTrendsUsecase{ctrl: ctrl}
	mock.recorder = &MockTrendsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrendsUsecase) EXPECT() *MockTrendsUsecaseMockRecorder {
	return m.recorder
}

// InsertOrUpdate mocks base method.
func (m *MockTrendsUsecase) InsertOrUpdate(arg0 *models.UserInterested) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdate", arg0)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate.
func (mr *MockTrendsUsecaseMockRecorder) InsertOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockTrendsUsecase)(nil).InsertOrUpdate), arg0)
}
