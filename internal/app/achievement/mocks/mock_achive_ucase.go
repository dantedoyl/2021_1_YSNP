// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/achievement (interfaces: AchievementUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	errors "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementUsecase is a mock of AchievementUsecase interface.
type MockAchievementUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementUsecaseMockRecorder
}

// MockAchievementUsecaseMockRecorder is the mock recorder for MockAchievementUsecase.
type MockAchievementUsecaseMockRecorder struct {
	mock *MockAchievementUsecase
}

// NewMockAchievementUsecase creates a new mock instance.
func NewMockAchievementUsecase(ctrl *gomock.Controller) *MockAchievementUsecase {
	mock := &MockAchievementUsecase{ctrl: ctrl}
	mock.recorder = &MockAchievementUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementUsecase) EXPECT() *MockAchievementUsecaseMockRecorder {
	return m.recorder
}

// GetUserAchievements mocks base method.
func (m *MockAchievementUsecase) GetUserAchievements(arg0 int) ([]*models.Achievement, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAchievements", arg0)
	ret0, _ := ret[0].([]*models.Achievement)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetUserAchievements indicates an expected call of GetUserAchievements.
func (mr *MockAchievementUsecaseMockRecorder) GetUserAchievements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAchievements", reflect.TypeOf((*MockAchievementUsecase)(nil).GetUserAchievements), arg0)
}
