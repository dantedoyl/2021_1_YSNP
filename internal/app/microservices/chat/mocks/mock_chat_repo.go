// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/microservices/chat (interfaces: ChatRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// CheckChatExist mocks base method.
func (m *MockChatRepository) CheckChatExist(arg0 *models.Chat, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChatExist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckChatExist indicates an expected call of CheckChatExist.
func (mr *MockChatRepositoryMockRecorder) CheckChatExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChatExist", reflect.TypeOf((*MockChatRepository)(nil).CheckChatExist), arg0, arg1)
}

// GetChatById mocks base method.
func (m *MockChatRepository) GetChatById(arg0, arg1 uint64) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatById", arg0, arg1)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatById indicates an expected call of GetChatById.
func (mr *MockChatRepositoryMockRecorder) GetChatById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatById", reflect.TypeOf((*MockChatRepository)(nil).GetChatById), arg0, arg1)
}

// GetLastNMessages mocks base method.
func (m *MockChatRepository) GetLastNMessages(arg0 *models.GetLastNMessagesReq) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNMessages", arg0)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNMessages indicates an expected call of GetLastNMessages.
func (mr *MockChatRepositoryMockRecorder) GetLastNMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNMessages", reflect.TypeOf((*MockChatRepository)(nil).GetLastNMessages), arg0)
}

// GetNMessagesBefore mocks base method.
func (m *MockChatRepository) GetNMessagesBefore(arg0 *models.GetNMessagesBeforeReq) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNMessagesBefore", arg0)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNMessagesBefore indicates an expected call of GetNMessagesBefore.
func (mr *MockChatRepositoryMockRecorder) GetNMessagesBefore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNMessagesBefore", reflect.TypeOf((*MockChatRepository)(nil).GetNMessagesBefore), arg0)
}

// GetUserChats mocks base method.
func (m *MockChatRepository) GetUserChats(arg0 uint64) ([]*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", arg0)
	ret0, _ := ret[0].([]*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatRepositoryMockRecorder) GetUserChats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatRepository)(nil).GetUserChats), arg0)
}

// InsertChat mocks base method.
func (m *MockChatRepository) InsertChat(arg0 *models.Chat, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertChat indicates an expected call of InsertChat.
func (mr *MockChatRepositoryMockRecorder) InsertChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChat", reflect.TypeOf((*MockChatRepository)(nil).InsertChat), arg0, arg1)
}

// InsertMessage mocks base method.
func (m *MockChatRepository) InsertMessage(arg0 *models.CreateMessageReq, arg1 uint64) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", arg0, arg1)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockChatRepositoryMockRecorder) InsertMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockChatRepository)(nil).InsertMessage), arg0, arg1)
}
